[tool.ruff]
line-length = 120
target-version = "py39"

select = [
    "ALL",
]

ignore = [
    "AIR", # airflow
    "ANN101", # self annotation
    "ANN102", # cls annotation
    "ANN204", # __init__ return type annotation
    "C90", # mccabe complexity
    "COM", # commas
    "CPY", # copyright
    "D", # docstring
    "DTZ", # datetime timezone
    "DJ",  # django
    "EM101", # string literals in exceptions
    "EXE", # executable
    "FA", # future annotations
    "FBT", # boolean trap
    "FIX002", # line contains TODO (covered by linter forcing issue link for TODO)
    "G", # logging format
    "INT",  # ?
    "ISC001",    # advised to ignore by ruff formatter
    "NPY", # numpy
    "PD", # pandas
    "PYI", # pyi files
    "TCH", # type checking import block
    "TRIO", # trio
    "TRY003", # long messages in exceptions
]

ignore-init-module-imports = true

[tool.ruff.per-file-ignores]
"**/tests/**/test*.py" = [
    "ARG", # unused function args -> fixtures nevertheless are functionally relevant...
    "ANN", # don't care about annotations in tests
    "PLR0913", # too many function arguments
    "PLR2004", # magic values (e.g. assert result == 1)
    "S", # security checks
]
"**/api/**/*endpoints*.py" = [
    "ANN201",   # ignore missing return type annotations in enpoints
    "B008",     # function call in default argument (... = Depends(...))
]

[tool.ruff.lint.isort]
case-sensitive = false
combine-as-imports = true
force-sort-within-sections = true
section-order = ["future", "standard-library", "third-party", "fastapi", "sqlalchemy", "api", "core", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
"api" = ["modules.api", "modules.*.api"]
"core" = ["modules.core", "modules.*.core"]
"fastapi" = ["fastapi", "fastapi.*"]
"sqlalchemy" = ["sqlalchemy", "sqlalchemy.*"]



[tool.mypy]
python_version = "3.10"
follow_imports = "normal"
ignore_missing_imports = true
incremental = true
warn_redundant_casts = true
strict_optional = true
warn_unused_configs = true
warn_return_any = true
warn_unused_ignores = true
disallow_any_generics = true
plugins = "pydantic.mypy"
show_error_codes = true
check_untyped_defs = true
disallow_untyped_defs = true
exclude = [
    "tests",
    ".*test.*",
]

[tool.pytest.ini_options]
testpaths = ["tests", "modules/**/tests"]



[tool.importlinter]
root_packages = ["app", "building_blocks", "commons", "modules"]

[[tool.importlinter.contracts]]
name = "Application layers"
type = "layers"
layers = [
    "app",
    "modules",
    "building_blocks | commons.container.infrastructure | commons.messagebox.infrastructure",
]
ignore_imports = [
    "commons.container.infrastructure.global_container -> commons.**",
    "modules.**.tests.** -> app.**",
]

[[tool.importlinter.contracts]]
name = "Modules layers"
type = "layers"
layers = [
    "api",
    "core.application",
    "(core.domain)",
]
containers = [
    "modules.rich_domain.module_1",
    "modules.rich_domain.module_2",
    "modules.crud",
]

[[tool.importlinter.contracts]]
name = "Modules interfaces"
type = "independence"
modules = [
    "modules.rich_domain.module_1",
    "modules.rich_domain.module_2",
    "modules.crud",
]
ignore_imports = [
    "modules.** -> modules.**.interface",
    "modules.**.tests.** -> app.**",
]
